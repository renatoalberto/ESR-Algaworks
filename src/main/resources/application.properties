spring.datasource.url=jdbc:mysql://localhost:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=131232

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create

# geracao comando ddl a partir do jpa, sem executar, gravando o arquivo ddl.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

spring.flyway.locations=classpath:db/migration,classpath:db/dataDesenvolvimento

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialec=org.hibernate.dialect.MySQL8Dialect

# Habilitando erros na desserializacao de propriedades inexistentes
spring.jackson.deserialization.fail-on-unknown-properties=true
# Habilitando erros na desserializacao de propriedades ignoradas
spring.jackson.deserialization.fail-on-ignored-properties=true
# Estrategias de nomes de propriedades: snake case vs lower camel case
#spring.jackson.property-naming-strategy=SNAKE_CASE

# Habilitando a validacao spring handleNoHandlerFoundException
spring.mvc.throw-exception-if-no-handler-found=true
# Desabilitar o uso do gerenciador padrao de resources no Spring. Com ela ativada o Spring gerencia as respostas padrao de erro 404 por exemplo, impedindo o uso de um Exception Handler
spring.web.resources.add-mappings=false

# hikari - gerencia pool de conexoes com o banco de dados 
# maximum-pool-size - numero maximo de pools - padrao e 10
# minimum-idle - numero minimo de conexoes ociosas - padrao e 10
# idle-timeout - tempo de espera em ociosidade, antes de fechar a conexao - padrao e 10000 milesegundos (10 segundos)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.idle-timeout=10000

# Validacao multipart global
# Padrao eh maximo 1MB por arquivo
#spring.servlet.multipart.max-file-size=20KB       
# Padrao eh maximo 10MB por requisicao 
#spring.servlet.multipart.max-request-size=20KB

# 14.26. Selecionando a implementacao do servico de storage de fotos (s3, local)
algafood.storage.tipo=s3

algafood.storage.local.diretorio-fotos=./src/main/resources/foto-upload/

# 14.20. Criando bean de propriedades de configuracao dos servicos de storage
#algafood.storage.s3.id-chave-acesso=         # propriedades informadas no boot dashboard - open config - Override propeties                   
#algafood.storage.s3.chave-acesso-secreta=    # propriedades informadas no boot dashboard - open config - Override propeties
algafood.storage.s3.bucket=algafood-renato
algafood.storage.s3.regiao=sa-east-1
algafood.storage.s3.diretorio-fotos=catalogo

# 15.2. Configurando o projeto para envio de e-mails usando servidor SMTP
spring.mail.host=email-smtp.sa-east-1.amazonaws.com
spring.mail.port=587
spring.mail.username=AKIA47H37OK4IP3AX2EB
#spring.mail.password=                         # propriedades informadas no boot dashboard - open config - Override propeties

# 15.3. Implementando o serviço de infraestrutura de envio de e-mails com Spring
algafood.email.remetente=AlgaFood <renato.alb@gmail.com>

# 15.7. Formatando valores monetarios com FTL
spring.freemarker.settings.locale=pt_BR

# 15.8. Desafio: implementando servico de envio de e-mail (FAKE, SMTP, SANDBOX)
algafood.email.impl=SMTP

# 15.9. Desafio: Implementando serviço de envio de e-mail sandbox
algafood.email.sandbox.destinatario=renato.alb+teste@gmail.com
